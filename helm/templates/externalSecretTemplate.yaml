apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.Name }}
  namespace: {{ .Values.global.shared.namespace }}
data:
  config.xml: |
    <?xml version="1.0" encoding="ISO-8859-1"?>
    <smtp_config>
      <!-- The port the server will listen on. Default 2601. -->
      <port>2601</port>
      <!-- Logging level can be set to debug, info or error -->
      <logging_level>info</logging_level>
      <!-- Logging mode can be set to console or file -->
      <logging_mode>console</logging_mode>
      <!-- The generic message that is used when an email is rejected -->
      <email_rejection_message>An unexpected error has occurred and your email has not been received. Please try again later.</email_rejection_message>
      <!-- The max size the message body can be in megabytes, default 15MB -->
      <message_size_limit_mb>50</message_size_limit_mb>
      <!-- AV can be disabled by setting the mode to 'none' -->
      <anti_virus>
        <mode>clamd</mode>
        <server>{{ .Values.global.cluster.clamav.host}}</server>
        <port>{{ .Values.global.cluster.clamav.port}}</port>
        <timeout_ms>30000</timeout_ms>
      </anti_virus>
      <!--
      Enable or disable http based health check endpoints (default disabled). These can be used to monitor the health of this application instance.
      If   enabled, the following endpoints are available:
      /smtp-status - Checks that the SMTP server is running.
      /db-status - Checks that a valid connection can be made to each database in the database_list.
      /av-status - Checks that a valid connection can be made to the virus scanner.
      Note that a security token must be included as a query parameter to requests to the db-status endpoint.
      These endpoints should only be exposed locally to monitoring tools such as Monitis, Zabbix, Nagios etc. or within Docker
      containers as healthchecks.
      -->
      <health_checks>
        <enable_http_health_checks>true</enable_http_health_checks>
        <port>8080</port>
        <security_token>{{ `{{ .securityToken }}` }}</security_token>
      </health_checks>
      <!-- The list of databases. Databases have a many to 1 relationship with recipients. -->
      <database_list>
        {{- range $database := .Values.databases }}
        <database>
          <name>{{ $database.name }}</name>
          <jdbc_url>jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST={{ $database.host }})(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME={{ $database.name }})))</jdbc_url>
          <username>{{ $database.username }}</username>
          <password>{{ print "{{ index . \"databasePassword-" $database.name "\" }}" }}</password>
          <store_query>INSERT INTO jamesmgr.inbox(message_name, repository_name, message_state, sender, recipients, remote_host, remote_addr, message_body, last_updated, message_subject, message_sent_datetime, header_xml) VALUES (  :mail_id, :repository, 'root', :from_address, :recipient, :remote_hostname, :remote_address, :message_body, sysdate, :subject, :sent_date, :header_xml_clob)</store_query>
          <attachment_store_query/>
        </database>
        {{- end}}
      </database_list>
      <!-- The recipient list has a many to 1 relationship with the databases above. -->
      <recipient_list>
        {{- range $database := .Values.databases }}
        {{- range $recipient := $database.recipients }}
        <recipient>
          {{- if $recipient.domain }}
          <domain>{{ $recipient.domain }}</domain>
          {{- else if $recipient.domainRegex }}
          <domain_regex>{{ $recipient.domainRegex }}</domain_regex>
          {{- end }}
          <database>{{ $database.name }}</database>
        </recipient>
        {{- end }}
        {{- end }}
        <recipient>
          <domain_regex>.+\.test.ecase.co.uk</domain_regex>
          <database>ecuat1</database>
        </recipient>
      </recipient_list>
    </smtp_config>